/**
 * 明明的爸爸是一位著名的数学家同时也是一位著名的数学启蒙老师。他经常出一些简单而有趣的数学题目来给刚刚接触数学的小朋友做，培养他们对数学的兴趣。
 * 一天，明明的爸爸想到了这样一个题目。如果有a、b、c三个1位的正整数，那么按以下的方法构成2个三位数：第一种方法是a为百位，b为十位，c为个位，构成的数就是abc；
 * 第二种方法是c为百位，b为十位，a为个位，构成的数就是cba；然后将这两个三位数相乘，会得到另一个数。现在就要数一下这个相乘后所得到的数中，有几个数字是与a、b、c相同的。
 * 例如：a=1，b=2，c=3，这样构成的两个三位数分别是123和321，两数相乘得到39483，在这个数中有2个“3”与c所表示的“3”是一样的，因此有2个数字是与a、b、c其中之一相同的。
 * 明明的爸爸决定明天把这道题目给小朋友做，他手头有很多组这样的a、b、c，但是要把所有的a、b、c都通过上述的方法计算出结果来需要很多的时间，明明的爸爸没有那么多的时间，
 * 于是他求助于你，请你帮他写一个程序，用来计算出相应的结果。 明明爸爸的问题可以归结为：输入a，b，c三个一位数字，要求abc这样的一个三位数与cba这样的一个三位数相乘，输出其结果，
 * 再判断相乘后的结果中的数字中有多少位是与a、b、c相同的，并输出有几位相等。

输入说明 :

你写的程序要求从标准输入设备（通常，键盘为标准输入设备）中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据仅占一行，
每行有三个正整数a、b、c，且a、b、c都为正整数，a、b、c中间用一个空格隔开。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。

输出说明 :

对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将这一组运算结果作为你所写程序的输出数据依次写入到标准输出设备（通常，显示屏为标准输出设备）中。
每组运算结果为两个整数，即abc和cba的乘积和有几位相等，两个数之间用一个空格隔开。每组运算结果单独形成一行数据，其行首和行尾都没有任何空格，
每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。

*/
#include <iostream>
#include <sstream>
#include <vector>
using namespace std;
int main(void)
{
    int a, b, c, r1, f, n1;    // r1 存放abc和cba的乘积，n1存放乘积与abc中的相同的数的数量
    vector<pair<int, int> > vt; // map
    stringstream ss;           // 用于字符串转整数
    string input, str;

    while (getline(cin, input))
    {
        if (input.size() == 0) // 输入阅读结束，退出循环
            break;
        ss << input[0];
        ss >> a;
        ss.clear();
        ss.str(""); // 清空
        ss << input[2];
        ss >> b;
        ss.clear();
        ss.str(""); // 清空
        ss << input[4];
        ss >> c;
        ss.clear();
        ss.str(""); // 清空
        r1 = (a * 100 + b * 10 + c) * (c * 100 + b * 10 + a);
        str = to_string(r1); // 转换为字符串
        n1 = 0;              // 清空
        for (int j = 0; j < str.size(); ++j)
        {
            ss << str.at(j);
            ss >> f;
            ss.clear();
            ss.str(""); // 清空
            if (f == a || f == b || f == c)
            {
                ++n1;
            }
        }
        vt.push_back(pair<int, int>(r1, n1));
    }
    for (int k = 0; k < vt.size(); ++k)
    {
        cout << vt[k].first << " " << vt[k].second << endl;
    }
}