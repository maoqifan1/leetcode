/**
 * 
 * 为了培养明明对数学的热爱，明明的爸爸经常想出一些简单有趣且富有数学思想的游戏给明明玩。
 * 有一次，明明的爸爸在纸上写了N个数字，有正整数、负整数和0。
 * 明明的爸爸给明明一个范围，他可以选大于等于L1个且小于等于L2个的数字（L1≤L2），且这些数字必须是连续的。
 * 但是要求明明选出的数的和最大，这样说明明可能不太明白，于是明明爸爸就举了一个简单的例子。 
 * 例如有5个数字为“1”、“2”、“3”、“4”、“5”，明明可以选择大于等于1个且小于等于2个的数字，也就是说明明可以选择1个数字，
 * 或者连续的2个数字。通过观察数字串，最后我们会选2个数字，4和5，他们的和最大，为9。 明明明白爸爸的意思后，就开始玩起游戏来。
 * 但是他发现，这个游戏看似简单，其实还是有相当的难度，因为数字越多，选择数字个数范围越大，则题目越难，到后面明明有些不想玩了。
 * 于是明明就求助于你，请你帮他写一个程序，来求出和的最大值。 明明的问题可以归结为：有N个数字，从中选择出连续的M(L1≤M≤L2)个数，求出它们之和的最大值。

输入说明 :

你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据有两行，
每组测试数据的第一行有三个整数N(0<N≤20)、L1、L2(0<L1≤L2≤N)，N表示数字串中有多少个整数，L1、L2表示可选数字个数的范围，
每组测试数据的第二行有N个整数，整数大小的绝对值都小于等于100，整数之间用一个空格隔开。每组测试数据与其后一组测试数据之间没有任何空行，
第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。

输出说明 :

对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，
并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。
每组运算结果为一个整数，即所求的最大值。每组运算结果单独形成一行数据，其行首和行尾都没有任何空格，
每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。 注：通常，显示屏为标准输出设备。
*/
#include <iostream>
#include <cstring>
#include <vector>
#include <stdlib.h>
using namespace std;

/**
 * @param a 存放数字的数组
 * @return 数组最大上升子序列的和
*/
int premium(int *a, int num, int startIndex, int endIndex)
{
    int *opt = new int;
    for (int i = 0; i < num; ++i)
    {
        if (i == 0) // 基准条件
            opt[i] = a[i];
        if (i == 1) // 基准条件
            opt[i] = max(a[i], a[i - 1]);
        else{

        }
    }
}

// 把用空格分隔的数字字符串转为整型并返回
int *get_num(string s)
{
    int *arr = new int;
    int i = 0;
    string str;
    for (int i = 0; i < s.length(); ++i)
    {
        if ((s.at(i) == ' ') || (i == s.length() - 1)) // 遇到空格,或是到字符串最后，则将该数字存入数组
        {
            arr[i++] = stoi(str); // 类型转换后存入
            str = "";             // 清空
        }
        else
        {
            // 若不是则添加到串中
            str.push_back(s.at(i));
        }
    }
    return arr;
}

int main(void)
{
    string s1, s2;
    int num, start, end;     // 数字串中数字的数量，数字串可选数字数量的最小值，可选数字数量的最大值
    int *seq = new int;      // 保存数字串
    while (getline(cin, s1)) // 读取
    {
        if (s1.size() == 0)
            break;                                                                // 输入为0则退出程序
        num = stoi(s1.substr(0, s1.find_first_of(" ")));                          // 数字串中数字的数量
        start = stoi(s1.substr(s1.find_first_of(" ") + 1, s1.find_last_of(" "))); //数字串可选数字数量的最小值
        end = stoi(s1.substr(s1.find_last_of(" " + 1), s1.length() - 1));         //可选数字数量的最大值

        getline(cin, s2); // 读取输入的数字串

        seq = get_num(s2); // 获得刚刚输入的数组
    }
}